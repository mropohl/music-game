import { getAudioNodeConnections } from './get-audio-node-connections';
import { getAudioNodeRenderer } from './get-audio-node-renderer';
export const renderInputsOfAudioNode = (audioNode, nativeOfflineAudioContext, nativeAudioNode) => {
    const audioNodeConnections = getAudioNodeConnections(audioNode);
    return Promise
        .all(audioNodeConnections.activeInputs
        .map((connections, input) => Array
        .from(connections)
        .map(([source, output]) => {
        return getAudioNodeRenderer(source)
            .render(source, nativeOfflineAudioContext)
            .then((node) => node.connect(nativeAudioNode, output, input));
    }))
        .reduce((allRenderingPromises, renderingPromises) => [...allRenderingPromises, ...renderingPromises], []));
};
//# sourceMappingURL=/build/es2018/helpers/render-inputs-of-audio-node.js.map